<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SARIF Data Path Analyzer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .upload-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .upload-area {
            border: 3px dashed #4a90e2;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: linear-gradient(45deg, #f8fafc, #e2e8f0);
        }

        .upload-area:hover {
            border-color: #357abd;
            background: linear-gradient(45deg, #e2e8f0, #cbd5e0);
            transform: translateY(-2px);
        }

        .upload-area.dragover {
            border-color: #2c5aa0;
            background: linear-gradient(45deg, #dbeafe, #bfdbfe);
        }

        .file-input {
            display: none;
        }

        .results-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            display: none;
        }

        .flaw-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .flaw-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .flaw-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }

        .flaw-card.selected {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
            transform: translateY(-5px);
        }

        .flaw-title {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 10px;
        }

        .flaw-details {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .graph-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            display: none;
        }

        .graph-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
        }

        .node-graph {
            width: 100%;
            height: 600px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: linear-gradient(45deg, #f7fafc, #edf2f7);
        }

        .node-details {
            background: #f8fafc;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #4a90e2;
            display: none;
        }

        .node {
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .node:hover {
            transform: scale(1.1);
        }

        .node.source {
            fill: #ff6b6b;
            stroke: #e55656;
        }

        .node.sink {
            fill: #4ecdc4;
            stroke: #45b7b8;
        }

        .node.intermediate {
            fill: #45b7d1;
            stroke: #3a9bc1;
        }

        .link {
            stroke: #718096;
            stroke-width: 2;
            marker-end: url(#arrowhead);
            transition: all 0.3s ease;
        }

        .link:hover {
            stroke: #2d3748;
            stroke-width: 3;
        }

        .node-label {
            font-size: 12px;
            fill: white;
            text-anchor: middle;
            dominant-baseline: middle;
            pointer-events: none;
        }

        .tooltip {
            position: absolute;
            background: rgba(0,0,0,0.9);
            color: white;
            padding: 10px;
            border-radius: 8px;
            font-size: 12px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
            max-width: 300px;
        }

        .legend {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 20px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #333;
        }

        .error-message {
            background: #fed7d7;
            color: #c53030;
            border: 1px solid #feb2b2;
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .loading {
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç SARIF Data Path Analyzer</h1>
            <p>Upload your SARIF file to visualize security flaw data paths</p>
        </div>

        <div class="upload-section">
            <div class="upload-area" id="uploadArea">
                <div style="font-size: 3rem; margin-bottom: 20px;">üìÅ</div>
                <h3>Drop your SARIF file here or click to browse</h3>
                <p style="margin-top: 10px; color: #666;">Supports .sarif and .json files</p>
                <input type="file" id="fileInput" class="file-input" accept=".sarif,.json">
            </div>
        </div>

        <div class="results-section" id="resultsSection">
            <h2>Analysis Results</h2>
            <div id="flawList" class="flaw-list"></div>
            
            <div class="graph-container" id="graphContainer">
                <div class="graph-header">
                    <h3 id="graphTitle">Data Flow Visualization</h3>
                    <div class="legend">
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #ff6b6b;"></div>
                            <span>Source</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #45b7d1;"></div>
                            <span>Intermediate</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #4ecdc4;"></div>
                            <span>Sink</span>
                        </div>
                    </div>
                </div>
                <div id="nodeGraph" class="node-graph"></div>
                <div id="nodeDetails" class="node-details"></div>
            </div>
        </div>

        <div class="tooltip" id="tooltip"></div>
    </div>

    <script>
        let sarifData = null;
        let currentFlawIndex = -1;
        let svg = null;
        let tooltip = null;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeUpload();
            tooltip = d3.select('#tooltip');
        });

        function initializeUpload() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');

            uploadArea.addEventListener('click', () => fileInput.click());
            uploadArea.addEventListener('dragover', handleDragOver);
            uploadArea.addEventListener('dragleave', handleDragLeave);
            uploadArea.addEventListener('drop', handleDrop);
            fileInput.addEventListener('change', handleFileSelect);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                processFile(files[0]);
            }
        }

        function handleFileSelect(e) {
            const files = e.target.files;
            if (files.length > 0) {
                processFile(files[0]);
            }
        }

        function processFile(file) {
            if (!file.name.endsWith('.sarif') && !file.name.endsWith('.json')) {
                showError('Please select a valid SARIF (.sarif or .json) file.');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    sarifData = JSON.parse(e.target.result);
                    if (!validateSarifFormat(sarifData)) {
                        showError('Invalid SARIF format. Please ensure the file contains valid SARIF data.');
                        return;
                    }
                    displayResults();
                } catch (error) {
                    showError('Error parsing file: ' + error.message);
                }
            };
            reader.readAsText(file);
        }

        function validateSarifFormat(data) {
            return data && data.runs && Array.isArray(data.runs) && data.runs.length > 0;
        }

        function showError(message) {
            const resultsSection = document.getElementById('resultsSection');
            resultsSection.innerHTML = `<div class="error-message">${message}</div>`;
            resultsSection.style.display = 'block';
        }

        function displayResults() {
            const resultsSection = document.getElementById('resultsSection');
            const flawList = document.getElementById('flawList');
            
            resultsSection.style.display = 'block';
            flawList.innerHTML = '';

            let flawIndex = 0;
            sarifData.runs.forEach(run => {
                if (run.results) {
                    run.results.forEach(result => {
                        const flawCard = createFlawCard(result, flawIndex);
                        flawList.appendChild(flawCard);
                        flawIndex++;
                    });
                }
            });

            if (flawIndex === 0) {
                flawList.innerHTML = '<p>No security flaws found in the SARIF file.</p>';
            }
        }

        function createFlawCard(result, index) {
            const card = document.createElement('div');
            card.className = 'flaw-card';
            card.onclick = () => selectFlaw(index);

            const ruleId = result.ruleId || 'Unknown';
            const message = result.message?.text || 'No description available';
            const level = result.level || 'info';
            const locations = result.locations?.length || 0;
            const codeFlows = result.codeFlows?.length || 0;

            card.innerHTML = `
                <div class="flaw-title">${ruleId}</div>
                <div class="flaw-details">
                    <div><strong>Severity:</strong> ${level}</div>
                    <div><strong>Locations:</strong> ${locations}</div>
                    <div><strong>Code Flows:</strong> ${codeFlows}</div>
                    <div style="margin-top: 10px; font-size: 0.8rem;">${message}</div>
                </div>
            `;

            return card;
        }

        function selectFlaw(index) {
            // Remove previous selection
            document.querySelectorAll('.flaw-card').forEach(card => {
                card.classList.remove('selected');
            });

            // Select current card
            document.querySelectorAll('.flaw-card')[index].classList.add('selected');
            
            currentFlawIndex = index;
            visualizeDataPath(index);
        }

        function visualizeDataPath(flawIndex) {
            const graphContainer = document.getElementById('graphContainer');
            const graphTitle = document.getElementById('graphTitle');
            
            graphContainer.style.display = 'block';

            let currentIndex = 0;
            let targetResult = null;

            // Find the result at the specified index
            for (const run of sarifData.runs) {
                if (run.results) {
                    for (const result of run.results) {
                        if (currentIndex === flawIndex) {
                            targetResult = result;
                            break;
                        }
                        currentIndex++;
                    }
                    if (targetResult) break;
                }
            }

            if (!targetResult) return;

            const ruleId = targetResult.ruleId || 'Unknown Flaw';
            graphTitle.textContent = `Data Flow: ${ruleId}`;

            // Create graph data from code flows
            const graphData = extractGraphData(targetResult);
            renderGraph(graphData);
        }

        function extractGraphData(result) {
            const nodes = [];
            const links = [];
            let nodeId = 0;

            if (result.codeFlows && result.codeFlows.length > 0) {
                result.codeFlows.forEach((codeFlow, flowIndex) => {
                    if (codeFlow.threadFlows) {
                        codeFlow.threadFlows.forEach(threadFlow => {
                            if (threadFlow.locations) {
                                let prevNodeId = null;
                                
                                threadFlow.locations.forEach((location, stepIndex) => {
                                    const physicalLocation = location.location?.physicalLocation;
                                    const message = location.location?.message?.text || `Step ${stepIndex + 1}`;
                                    
                                    let nodeType = 'intermediate';
                                    if (stepIndex === 0) nodeType = 'source';
                                    if (stepIndex === threadFlow.locations.length - 1) nodeType = 'sink';

                                    const node = {
                                        id: nodeId,
                                        type: nodeType,
                                        message: message,
                                        file: physicalLocation?.artifactLocation?.uri || 'Unknown',
                                        line: physicalLocation?.region?.startLine || 0,
                                        column: physicalLocation?.region?.startColumn || 0,
                                        step: stepIndex + 1,
                                        flowIndex: flowIndex
                                    };

                                    nodes.push(node);

                                    if (prevNodeId !== null) {
                                        links.push({
                                            source: prevNodeId,
                                            target: nodeId
                                        });
                                    }

                                    prevNodeId = nodeId;
                                    nodeId++;
                                });
                            }
                        });
                    }
                });
            } else {
                // If no code flows, create nodes from locations
                if (result.locations) {
                    result.locations.forEach((location, index) => {
                        const physicalLocation = location.physicalLocation;
                        const message = result.message?.text || `Location ${index + 1}`;
                        
                        const node = {
                            id: nodeId++,
                            type: index === 0 ? 'source' : 'sink',
                            message: message,
                            file: physicalLocation?.artifactLocation?.uri || 'Unknown',
                            line: physicalLocation?.region?.startLine || 0,
                            column: physicalLocation?.region?.startColumn || 0,
                            step: index + 1,
                            flowIndex: 0
                        };

                        nodes.push(node);
                    });
                }
            }

            return { nodes, links };
        }

        function renderGraph(data) {
            const container = d3.select('#nodeGraph');
            container.selectAll('*').remove();

            const width = container.node().clientWidth;
            const height = container.node().clientHeight;

            svg = container.append('svg')
                .attr('width', width)
                .attr('height', height);

            // Define arrow marker
            svg.append('defs').append('marker')
                .attr('id', 'arrowhead')
                .attr('viewBox', '-0 -5 10 10')
                .attr('refX', 25)
                .attr('refY', 0)
                .attr('orient', 'auto')
                .attr('markerWidth', 6)
                .attr('markerHeight', 6)
                .append('path')
                .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
                .attr('fill', '#718096');

            // Create force simulation
            const simulation = d3.forceSimulation(data.nodes)
                .force('link', d3.forceLink(data.links).id(d => d.id).distance(100))
                .force('charge', d3.forceManyBody().strength(-300))
                .force('center', d3.forceCenter(width / 2, height / 2))
                .force('collision', d3.forceCollide().radius(30));

            // Create links
            const link = svg.append('g')
                .selectAll('.link')
                .data(data.links)
                .enter().append('line')
                .attr('class', 'link');

            // Create nodes
            const node = svg.append('g')
                .selectAll('.node')
                .data(data.nodes)
                .enter().append('circle')
                .attr('class', d => `node ${d.type}`)
                .attr('r', 20)
                .on('click', showNodeDetails)
                .on('mouseover', showTooltip)
                .on('mouseout', hideTooltip)
                .call(d3.drag()
                    .on('start', dragstarted)
                    .on('drag', dragged)
                    .on('end', dragended));

            // Add labels
            const label = svg.append('g')
                .selectAll('.node-label')
                .data(data.nodes)
                .enter().append('text')
                .attr('class', 'node-label')
                .text(d => d.step);

            // Update positions on simulation tick
            simulation.on('tick', () => {
                link
                    .attr('x1', d => d.source.x)
                    .attr('y1', d => d.source.y)
                    .attr('x2', d => d.target.x)
                    .attr('y2', d => d.target.y);

                node
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y);

                label
                    .attr('x', d => d.x)
                    .attr('y', d => d.y);
            });

            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }

            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }
        }

        function showNodeDetails(event, node) {
            const detailsContainer = document.getElementById('nodeDetails');
            detailsContainer.style.display = 'block';
            
            detailsContainer.innerHTML = `
                <h4>Node Details - Step ${node.step}</h4>
                <div style="margin-top: 15px;">
                    <div><strong>Type:</strong> ${node.type.charAt(0).toUpperCase() + node.type.slice(1)}</div>
                    <div><strong>File:</strong> ${node.file}</div>
                    <div><strong>Line:</strong> ${node.line}</div>
                    <div><strong>Column:</strong> ${node.column}</div>
                    <div style="margin-top: 10px;"><strong>Message:</strong></div>
                    <div style="background: white; padding: 10px; border-radius: 5px; margin-top: 5px; border-left: 3px solid #4a90e2;">
                        ${node.message}
                    </div>
                </div>
            `;
        }

        function showTooltip(event, node) {
            tooltip
                .style('opacity', 1)
                .html(`
                    <strong>Step ${node.step}</strong><br/>
                    Type: ${node.type}<br/>
                    File: ${node.file}<br/>
                    Line: ${node.line}
                `)
                .style('left', (event.pageX + 10) + 'px')
                .style('top', (event.pageY - 10) + 'px');
        }

        function hideTooltip() {
            tooltip.style('opacity', 0);
        }
    </script>
</body>
</html>
